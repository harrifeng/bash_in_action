* Chapter 1: Introduction
* Chapter 2: Waht is the shell?
** Your First Keystorkes
   + 如果在shell promptz最后是个'#', 那表示这个terminal session 有超级管理员权限
   + 如果只是'$', 那么只有普通管理员权限.
** Try Some Simple Commands
   + date, cal, df, free 分别表示日期, 日历和disk下面剩余的硬盘和内存空间
     #+begin_src sh 
       hfeng@hfeng-cloud:~$ date
       Mon Jan 21 13:34:04 MSK 2013
       hfeng@hfeng-cloud:~$ cal
           January 2013      
       Su Mo Tu We Th Fr Sa  
              1  2  3  4  5  
        6  7  8  9 10 11 12  
       13 14 15 16 17 18 19  
       20 21 22 23 24 25 26  
       27 28 29 30 31        
                             
       hfeng@hfeng-cloud:~$ df
       Filesystem     1K-blocks    Used Available Use% Mounted on
       /dev/simfs       5242880 2269328   2973552  44% /
       none              131072       8    131064   1% /dev
       none               26216    1060     25156   5% /run
       none                5120       0      5120   0% /run/lock
       none              131072       0    131072   0% /run/shm     
       hfeng@hfeng-cloud:~$ free
                    total       used       free     shared    buffers     cached
       Mem:        262144      59536     202608          0          0      36912
       -/+ buffers/cache:      22624     239520
       Swap:            0          0          0
     #+end_src
   + 在图形化的Linux的后台其实还是有六个console在运转.使用Ctrl+ALT-F1toF6来到达
     这些console. Alt-F1toF6来相互切换.Alt+F7回到桌面.
* Chapter 3 Navigation
  + cd, pwd, ls是最重要的几个移动命令,其实cd的变体'cd -'表示上次到达的目录, 
    'cd ~user_name'表示到达user_name的home文件夹
    #+begin_src sh
      hfeng@hfeng-cloud:/home/lliu$ pwd
      /home/lliu
      hfeng@hfeng-cloud:/home/lliu$ cd ~hfeng
      hfeng@hfeng-cloud:~$ cd gitbox
      hfeng@hfeng-cloud:~/gitbox$ pwd
      /home/hfeng/gitbox
      hfeng@hfeng-cloud:~/gitbox$ cd -
      /home/hfeng 
    #+end_src
  + 文件名的几个要点:
    - 以'.'开头的是隐藏文件,需要ls-a
    - Linux是大小写敏感的
    - Linux没有扩展名一说
    - 在文件名中只使用".", "-", "_", 不要使用空格.
* Chapter 4 Exploring The System
  + 常用命令的option也非常重要,比如ls
    | Option | Long Option      | Description                     |
    |--------+------------------+---------------------------------|
    | -a     | --all            | List all files                  |
    | -d     | --directory      | with -l to see the information  |
    |        |                  | about the directory rather than |
    |        |                  | it contents                     |
    | -F     | --classify       | give the folder a "/"           |
    | -h     | --human-readable | human readable file size        |
    | -l     |                  | Display in long format          |
    | -r     | --reverse        | reverse the order               |
    | -S     |                  | Sort result by file size        |
    | -t     |                  | Sort by modification time       |
    | -i     |                  | show inode number               |
  + ls的-l选项会产生非常长的list, 这个list的各个部分的内容如下:
    #+begin_src sh
      hfeng@hfeng-cloud:~/tmp/testCode$ ls -al
      total 32
      drwxr-xr-x  4 hfeng admin 4096 Nov 30 09:18 .
      drwxr-xr-x 11 hfeng admin 4096 Jan 21 13:49 ..
      drwxr-xr-x  8 hfeng admin 4096 Nov 30 09:18 .git
      -rw-r--r--  1 hfeng admin  124 Nov 30 09:18 .gitignore
      -rw-r--r--  1 hfeng admin  175 Nov 30 09:18 README.md
    #+end_src
  + 我们以其中的README.md文件为例来进行分析
    | Field        | Meaning                                       |
    |--------------+-----------------------------------------------|
    | -rw-r--r--   | first '-' stands for common file,             |
    |              | first 'd' stands for directory.Following      |
    |              | three access rights are 1) owner 2) group     |
    |              | member 3) everyone                            |
    | 1            | File's number of hard links                   |
    | hfeng        | The name of the file's owner                  |
    | admin        | The name of the group which owns the file     |
    | 175          | Size fo the file in bytes                     |
    | Nov 30 09:18 | Date and time of the file's last modification |
    | README.md    | Name of the file                              |
  + 我们说过,linux没有扩展名,所以靠file命令来查看文件
    #+begin_src sh 
      hfeng@hfeng-cloud:~/tmp/testCode$ file README.md 
      README.md: ASCII English text
      hfeng@hfeng-cloud:~/tmp/testCode$ file test.c
      test.c: ASCII text
      hfeng@hfeng-cloud:~/tmp/testCode$ file python
      python: directory
    #+end_src
  + 我们可以利用less来当做简单的vi访问文件,在bash中b是向前,space是向后看.当然了
    有emacs就不需要这个命令了.
* Chapter 5: Manipulating Files And Directories
  + cp是用来复制的这个都知道,但是wildcard不是每个人都知道哈在cp中可以使用的
    通配符并不是很多
    | Wildcard      | Meaning                       |
    |---------------+-------------------------------|
    | *             | any characters                |
    | ?             | any single character          |
    | [characters]  | any characters in the set     |
    | [!characters] | any characters not in the set |
    | [:class]     | some kind of classes          |
  + 上面提到的class如下, 这些都是新特性, 比如[:lower:], 可以对你来说[a-z]更
    常见和习惯,但是那些都过时了.现在的class准确性更高
    | Character Class | Meaning                    |
    |-----------------+----------------------------|
    | [:alnum:]       | any alphanumeric character |
    | [:alpha:]       | any alphabetic character   |
    | [:digit:]       | any numeral                |
    | [:lower:]       | any lowercase letter       |
    | [:upper:]       | any uppercase letter       | 
  + mkdir不用多说了创建文件夹
  + cp是复制文件和文件夹.cp, mv是移动和重命名, 他们有如下属性值得注意
    | Option            | Meaning                                                   |
    | -a, --archive     | Copy to take the files' previous ownership                |
    |                   | and permissions. If not set the copies take               |
    |                   | on the default attributes of the user performing the      |
    |                   | copy                                                      |
    | -i, --interactive | If this optin is not specified cp will silently overwrite |
    |                   | files                                                     |
    | -r, --recursive   | Recursively copy directories and their contest, copy      |
    |                   | directory need this                                       |
    | -u, --update      | only new file or file existed but later file is newer,    |
    |                   | could the copy finished                                   |
    | -v, --verbose     | show all the copy                                         | 
  + rm拥有上面说的i, v, r以外,还有-f (force)属性来强制删除.
  + ln是创建软连接或者硬连接
    #+begin_src sh
      ln somefile hardlink
      ln -s file_or_dir softlink
    #+end_src
  + 硬连接是老式连接,一旦建立起来,就等于一个文件有了两个名字,任何对其中一个文件
    的改动都会影响到另外一个,但是删除一个另外一个却不会有影响,一旦创建硬链接.
    两个文件的地位是相等的.
  + 而软连接更类似windows的快捷方式,其中一个文件内容只有路径,如果另外一个文件
    被删除这个只有内容的文件就没有什么作用了.之所以后来又创建软连接,是因为硬链接
    天生的两个缺点:
    - 只能在同一个文件系统内创建硬链接(硬链接其实就是指向同一个i-node)
    - 硬链接不能指向文件夹.(文件类型只有-, d, l, 系统无从知道哪个是硬链接, 
      一个文件夹的子文件夹如果hard link它的祖父文件夹, 这样就形成了一个环,
      永远无法退出)
* Chapter 6:Working With Commands
  + 在shell中可以使用的命令其实是分下面四种:
    1) 可执行程序,一般都是在/usr/bin, /bin下面等等
    2) shell builtin,自己集成的命令, 一般集成在/bin/bash下面. 也就是说你which cmd是找
       不到这个cmd在哪里的.
    3) alias, 是我们基于其他命令的别称
    4) shell function, 比如我们自己写了一个函数,然后把它放到了环境变量里面.
  + 上面四种的前三种分别如下:
    #+begin_src sh
      hfeng@hfeng-cloud:~$ type cp
      cp is /bin/cp
      hfeng@hfeng-cloud:~$ type type
      type is a shell builtin
      hfeng@hfeng-cloud:~$ type ls
      ls is aliased to `ls --color=auto' 
    #+end_src
  + apropos可以search整个man文档,找到某一个主题的所有命令
    #+begin_src sh
      hfeng@hfeng-cloud:~$ apropos floppy
      fdformat (8)         - low-level format a floppy disk
      mbadblocks (1)       - tests a floppy disk, and marks the bad blocks in the FAT
      mformat (1)          - add an MSDOS filesystem to a low-level formatted flopp...
      mxtar (1)            - Wrapper for using GNU tar directly from a floppy disk 
    #+end_src
  + whatis则是一句话介绍某个命令(只有可执行程序才能被解释)
    #+begin_src sh
      hfeng@hfeng-cloud:~$ whatis gcc
      gcc (1)              - GNU project C and C++ compiler
    #+end_src
  + 创建alias是方法如下
    #+begin_src sh
      hfeng@hfeng-cloud:~$ alias foo='cd /tmp; ls; cd -'
      hfeng@hfeng-cloud:~$ foo
      hsperfdata_root  hsperfdata_tomcat6  tomcat6-tomcat6-tmp
      /home/hfeng
      hfeng@hfeng-cloud:~$ type foo
      foo is aliased to `cd /tmp; ls; cd -'
      hfeng@hfeng-cloud:~$ unalias foo
      hfeng@hfeng-cloud:~$ type foo
      bash: type: foo: not found
    #+end_src
  + 我们前面看到ls是一个alias,如果我们想看系统中所有的alias可以直接输入alias
    #+begin_src sh
      hfeng@hfeng-cloud:~$ alias
      alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
      alias egrep='egrep --color=auto'
      alias fgrep='fgrep --color=auto'
      alias foo='cd ~; ls; cd -'
      alias grep='grep --color=auto'
      alias l='ls -CF'
      alias la='ls -A'
      alias ll='ls -alF'
      alias ls='ls --color=auto'
      alias rvm-restart='rvm_reload_flag=1 source '\''/home/hfeng/.rvm/scripts/rvm'\'''
    #+end_src
* Chapter 7: Redirection
  + 在Unix-like系统中, everything is a file, 所以ls的输出其实就是把内容写入到一
    个叫做standard output的文件, 把状态信息发送到standard error的文件, 默认情况下
    stdout和stderr都是打印在屏幕上, btw读取命令的文件叫standard input
  + '>'可以把standard output到文件中(注意只有stoud, 没有stderr), 而 '>>'可以做到
    在文件行尾增加新的内容
  + 如果想把stderr存到文件,那么是用2>(没有空格), 如果是把stdout和stderr都存到文件,
    那么是用2>&1.例子如下
    #+begin_src sh
      hfeng@hfeng-cloud:~$ ls -l /bin/usr ~ 2> ls-error.txt
      /home/hfeng:
      total 28
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Documents
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Music
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Pictures
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Public
      drwxr-xr-x  8 hfeng admin 4096 Jan 21 13:24 gitbox
      -rw-r--r--  1 hfeng admin   54 Jan 22 07:12 ls-error.txt
      drwxr-xr-x 11 hfeng admin 4096 Jan 21 13:49 tmp
      hfeng@hfeng-cloud:~$ cat ls-error.txt 
      ls: cannot access /bin/usr: No such file or directory
      hfeng@hfeng-cloud:~$ ls -l /bin/usr ~ > ls-error-output.txt 2>$1
      bash: $1: ambiguous redirect
      hfeng@hfeng-cloud:~$ ls -l /bin/usr ~ > ls-error-output.txt 2>&1
      hfeng@hfeng-cloud:~$ cat ls-error-output.txt 
      ls: cannot access /bin/usr: No such file or directory
      /home/hfeng:
      total 32
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Documents
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Music
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Pictures
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Public
      drwxr-xr-x  8 hfeng admin 4096 Jan 21 13:24 gitbox
      -rw-r--r--  1 hfeng admin   54 Jan 22 07:16 ls-error-output.txt
      -rw-r--r--  1 hfeng admin   54 Jan 22 07:12 ls-error.txt
      drwxr-xr-x 11 hfeng admin 4096 Jan 21 13:49 tmp
    #+end_src
  + 上面把stdout和stderr都导入文件的代码看起来有点诡异, 其实它的本意是首先用
    '>'转入stdout, 然后用2>转入stderr, 这个时候&1就代表前面的文件, 新版本的
    bash提供了一个新的方法(&>)来实现上面的行为而不至于出现&1这种很magic的代码
    #+begin_src sh
      hfeng@hfeng-cloud:~$ ls -l /bin/usr ~ &> new-err-out.txt
      hfeng@hfeng-cloud:~$ cat new-err-out.txt 
      ls: cannot access /bin/usr: No such file or directory
      /home/hfeng:
      total 36
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Documents
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Music
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Pictures
      drwxr-xr-x  2 hfeng admin 4096 Jan 21 13:49 Public
      drwxr-xr-x  8 hfeng admin 4096 Jan 21 13:24 gitbox
      -rw-r--r--  1 hfeng admin  504 Jan 22 07:16 ls-error-output.txt
      -rw-r--r--  1 hfeng admin   54 Jan 22 07:12 ls-error.txt
      -rw-r--r--  1 hfeng admin   54 Jan 22 07:21 new-err-out.txt
      drwxr-xr-x 11 hfeng admin 4096 Jan 21 13:49 tmp 
    #+end_src
  + cat可以处理stdin, 方法如下,各种变化
    #+begin_src sh
      hfeng@hfeng-cloud:~$ echo helloworld > test.txt
      hfeng@hfeng-cloud:~$ cat < test.txt
      helloworld
      hfeng@hfeng-cloud:~$ cat > test.txt
      hello world hello world
      
      
      hfeng@hfeng-cloud:~$ cat < test.txt
      hello world hello world
      hfeng@hfeng-cloud:~$ cat
      hello world
      hello world
      
    #+end_src
  + uniq可以去除排序中的重复,如果我们只想看重复,那么就可以用uniq -d 
    而wc可以打印出来记过有多少行, 多少word,多少bytes -l只看行
    #+begin_src sh
      hfeng@hfeng-cloud:~$ ls /bin /usr/bin | sort | uniq -d
      less
      lessecho
      lessfile
      lesskey
      lesspipe
      tcsh
      touch
      which
      hfeng@hfeng-cloud:~$ ls /bin /usr/bin | sort | uniq -d| wc -l
      8
      hfeng@hfeng-cloud:~$ ls /bin /usr/bin | sort | uniq | wc -l
      980 
    #+end_src
  + grep是查询,head, first是查看头和尾.都很常见. grep的格式是grep pattern [file],
    如果没有file的话,这个grep就是对stdin进行的, 也就是pipeline传入进来的.
    #+begin_src sh
      hfeng@hfeng-cloud:~$ ls /bin /usr/bin | sort | uniq | grep zip
      bunzip2
      bzip2
      bzip2recover
      funzip
      gpg-zip
      gunzip
      gzip
      miniunzip
      minizip
      mzip
      unzip
      unzipsfx
      zipgrep
      zipinfo
      hfeng@hfeng-cloud:~$ ls /bin /usr/bin | sort | uniq | grep zip | head -3
      bunzip2
      bzip2
      bzip2recover
      hfeng@hfeng-cloud:~$ ls /bin /usr/bin | sort | uniq | grep zip | tail -3
      unzipsfx
      zipgrep
      zipinfo 
    #+end_src
  + 为了能够在管道中间保存一份拷贝, 同时保证管道不断,又发明了tee
    #+begin_src sh 
      hfeng@hfeng-cloud:~$ ls /usr/bin | tee ls.txt | grep zip
      funzip
      gpg-zip
      miniunzip
      minizip
      mzip
      unzip
      unzipsfx
      zipgrep
      zipinfo
      hfeng@hfeng-cloud:~$ ls -l ls.txt
      -rw-r--r-- 1 hfeng admin 7424 Jan 22 07:43 ls.txt    
    #+end_src
* Chapter 8: Seeing the world as the shell sees it.
  + echo 可以说直接体现了shell的思维, 可以通过echo来看看shell在想些什么.
* Chapter 9: Advanced Keyboard Tricks
* Chapter 10: Permissions
  + id, chmod, umask, su, sudo , chown, chgrp, passwd
* Chapter 11: Processes
  + ps 可以查看当前运行的process, 但是默认只有当前terminal相关的process,通常
    来说就是bash和ps
    #+begin_src sh
      hfeng@hfeng-cloud:~$ ps
        PID TTY          TIME CMD
       4924 pts/3    00:00:00 bash
      10010 pts/3    00:00:00 ps
    #+end_src
  + 如果想要更多的信息,我们可以加x (不需要-), 就会显示出来当前用户所有的进程, 
    而且多了一个STAT(status栏目)来追踪进程当前的状态.aux的话会显示包括所有
    用户的进程信息
    #+begin_src sh
      hfeng@hfeng-cloud:~$ ps x
        PID TTY      STAT   TIME COMMAND
       4923 ?        S      0:00 sshd: hfeng@pts/3   
       4924 pts/3    Ss     0:00 /bin/bash --noediting -i
       8392 ?        S      0:00 sshd: hfeng@pts/2   
       8393 pts/2    Ss+    0:00 /bin/sh
      10003 pts/3    R+     0:00 ps x
      
      hfeng@hfeng-cloud:~$ ps aux
      USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
      root         1  0.0  0.2  24024   756 ?        Ss   Jan04   0:01 init
      root         2  0.0  0.0      0     0 ?        S    Jan04   0:00 [kthreadd/230]
      root         3  0.0  0.0      0     0 ?        S    Jan04   0:00 [khelper/230]
      root       166  0.0  0.0  17188    32 ?        S    Jan04   0:00 upstart-udev-br
      root       177  0.0  0.1  49912   368 ?        Ss   Jan04   0:04 /usr/sbin/sshd
      root       185  0.0  0.0  21292    28 ?        Ss   Jan04   0:00 /sbin/udevd --d
      root       305  0.0  0.0  21288    28 ?        S    Jan04   0:00 /sbin/udevd --d
      root       306  0.0  0.0  21288    28 ?        S    Jan04   0:00 /sbin/udevd --d
      root       345  0.0  0.0  15144    28 ?        S    Jan04   0:00 upstart-socket-
      root       384  0.0  0.0  14924    28 ?        Ss   Jan04   0:00 /usr/sbin/xinet
      root       401  0.0  0.1  19068   300 ?        Ss   Jan04   0:01 cron
      root       404  0.0  0.2  91208   708 ?        Ss   Jan04   0:08 nmbd -D
      syslog     421  0.0  0.1  12708   484 ?        Ss   Jan04   0:05 /sbin/syslogd -
      postgres   444  0.0  0.1 124840   364 ?        S    Jan04   0:07 /usr/lib/postgr
      postgres   447  0.0  0.0 124824   188 ?        Ss   Jan04   1:59 postgres: write
      postgres   448  0.0  0.0 124824    96 ?        Ss   Jan04   1:31 postgres: wal w
      postgres   449  0.0  0.3 125564   960 ?        Ss   Jan04   0:23 postgres: autov
      postgres   450  0.0  0.1  93200   316 ?        Ss   Jan04   0:17 postgres: stats
      root       492  0.0  0.0  78620    16 ?        Ss   Jan04   0:00 /usr/sbin/sasla
      root       494  0.0  0.0  78620     4 ?        S    Jan04   0:00 /usr/sbin/sasla
      root       558  0.0  0.1  89044   480 ?        Ss   Jan04   0:24 sendmail: MTA: 
      root      4911  0.0  0.9  73316  2588 ?        Ss   Jan21   0:00 sshd: hfeng [pr
      hfeng     4923  0.0  0.5  73316  1320 ?        S    Jan21   0:00 sshd: hfeng@pts
      hfeng     4924  0.0  0.9  19604  2544 pts/3    Ss   Jan21   0:00 /bin/bash --noe
      root      8380  0.0  1.2  73316  3360 ?        Ss   05:55   0:00 sshd: hfeng [pr
      hfeng     8392  0.0  0.7  73464  1904 ?        S    05:55   0:00 sshd: hfeng@pts
      hfeng     8393  0.0  0.3  12788   960 pts/2    Ss+  05:55   0:00 /bin/sh
      hfeng    10054  0.0  0.4  15236  1124 pts/3    R+   09:45   0:00 ps aux 
    #+end_src
  + 类型windows的资源管理器, bash有个动态的命令叫top
  + jobs可以看到从我们当前terminal启动的命令, fg是把程序放到前台运行, bg是把程序
    放到后台(还是在运行), 而ctrl+z就是stop当前process了
    #+begin_src sh
      hfeng@hfeng-cloud:~$ ps
        PID TTY          TIME CMD
       4924 pts/3    00:00:00 bash
      10648 pts/3    00:00:00 ps
      hfeng@hfeng-cloud:~$ ./a.out
      
      
      [1]+  Stopped                 ./a.out
      hfeng@hfeng-cloud:~$ hfeng@hfeng-cloud:~$ ps
        PID TTY          TIME CMD
       4924 pts/3    00:00:00 bash
      10649 pts/3    00:00:08 a.out
      10650 pts/3    00:00:00 ps
      hfeng@hfeng-cloud:~$ jobs
      [1]+  Stopped                 ./a.out
      hfeng@hfeng-cloud:~$ bg %1
      [1]+ ./a.out &
      hfeng@hfeng-cloud:~$ ps
        PID TTY          TIME CMD
       4924 pts/3    00:00:00 bash
      10649 pts/3    00:00:12 a.out
      10652 pts/3    00:00:00 ps
      hfeng@hfeng-cloud:~$ kill 10649
      hfeng@hfeng-cloud:~$ ps
        PID TTY          TIME CMD
       4924 pts/3    00:00:00 bash
      10653 pts/3    00:00:00 ps
      [1]+  Terminated              ./a.out
      hfeng@hfeng-cloud:~$ ps
        PID TTY          TIME CMD
       4924 pts/3    00:00:00 bash
      10654 pts/3    00:00:00 ps 
    #+end_src





    









